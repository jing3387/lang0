(in-package #:satori)

(defun foreign-funcall-ptr (ty main)
  (let ((ptr (llvm:pointer-to-global *execution-engine* main)))
    (cond
      ((eq ty 'void)
       (progn
         (if (cffi:pointer-eq main ptr)
             (llvm:run-function *execution-engine* ptr ())
             (cffi:foreign-funcall-pointer ptr () :void))
         nil))
      ((eq ty 'i32)
       (if (cffi:pointer-eq main ptr)
           (llvm:generic-value-to-int (llvm:run-function *execution-engine* ptr ()) t)
           (cffi:foreign-funcall-pointer ptr () :int32)))
      ((case (first ty)
        (symbol
         (if (cffi:pointer-eq main ptr)
             (cffi:foreign-string-to-lisp
              (llvm:generic-value-to-pointer (llvm:run-function *execution-engine* ptr ())))
             (cffi:foreign-funcall-pointer ptr () :string))))))))

(defun %eval (x env tenv defs)
  (let* ((ctx (remove-if-not #'(lambda (x) (symbolp (first x))) tenv))
         (constr (remove-if #'(lambda (x) (symbolp (first x))) tenv))
         (sub (substitute-definitions x defs))
         (defs* (second sub))
         (x& (first sub))
         (inference (infer x& ctx constr))
         (tenv* (append (second inference) tenv))
         (type (or (and (definep x) 'void)
                   (satori-type (first inference) tenv*))))
    (if (genericp (first inference))
        `(nil ,env ,tenv* ,defs*)
        (let* ((ir1 (third inference))
               (ir2 (flat-closure-convert ir1))
               (retty (or (and (definep x) (llvm:void-type))
                          (llvm-type type tenv*)))
               (param-types (make-array 0))
               (ftype (llvm:function-type retty param-types))
               (main (llvm:add-function *module* "" ftype)))
          (llvm:position-builder-at-end *builder*
                                        (llvm:append-basic-block main "entry"))
          (let* ((x* (comp-in-main ir2 env tenv*))
                 (env** (or (second x*) env))
                 (tenv** (or (third x*) tenv*)))
            (if (cffi:pointer-eq retty (llvm:void-type))
                (llvm:build-ret *builder*)
                (llvm:build-ret *builder* (first x*)))
            (llvm:verify-module *module*)
            (let* ((result (foreign-funcall-ptr type main)))
              `(,result ,env** ,tenv** ,defs)))))))
