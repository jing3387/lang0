(in-package #:satori)

(defun compiler ()
  (llvm:with-objects ((*module* llvm:module "<unknown>")
                      (*builder* llvm:builder))
    (setf *closure-environments* (make-hash-table :test #'equal))
    (setf *environment-parameters* (make-hash-table :test #'equal))
    (llvm:with-objects ((*builder* llvm:builder))
      (let* ((param-types (make-array 0))
             (ftype (llvm:function-type (llvm:int32-type) param-types))
             (main (llvm:add-function *module* "main" ftype))
             (retval (comp 0 nil)))
        (llvm:position-builder-at-end *builder* (llvm:append-basic-block main "entry"))
        (let ((ret (llvm:build-ret *builder* retval)))
          (loop for x = (read *standard-input* nil 'eof nil)
                while (not (equal x 'eof)) do
                  (llvm:position-builder-before *builder* ret)
                  (let* ((env (make-hash-table :test #'equal))
                         (ir1 (flat-closure-convert x)))
                    (comp-in-main ir1 env)
                    (llvm:dump-module *module*)
                    (llvm:verify-module *module*))))))))
