(in-package :satori)

(defun evlis (xs)
  (llvm:with-objects ((*module* llvm:module "<unknown>")
                      (*builder* llvm:builder)
                      (*execution-engine* llvm:execution-engine *module*))
    (setf *next-serial* 0
          *types* (make-hash-table :test #'equal))
    (cond ((null xs) nil)
          (t (car (reduce
                   #'(lambda (ctx x)
                       (let ((env (second ctx))
                             (tenv (third ctx))
                             (defs (fourth ctx)))
                         (let* ((x* (%eval x env tenv defs))
                                (env* (second x*))
                                (tenv* (third x*))
                                (defs* (fourth x*)))
                           `(,(first x*) ,env* ,tenv* ,defs*))))
                   xs :initial-value `(nil nil nil nil)))))))
